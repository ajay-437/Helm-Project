The error message org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed: WorkflowScript: 68: expecting '*', found '<EOF>' @ line 68, column 1. 1 error indicates that the Jenkins pipeline script is expecting something at the end of the file but it found the end of the file (EOF) instead.

Looking at your script, it seems like you’re missing a closing brace } at the end of your pipeline script. The pipeline, stages, and stage blocks all start with { but there’s no corresponding } to close the pipeline block.

Here’s the corrected script:

pipeline{
    agent any
    environment{
    DOCKERHUB_CREDENTIALS=credentials('docker-cred')
    }   
    def newVersion = ""
    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Login to Docker Hub
                    sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"

                    // Build the image
                    sh "docker build -t ajay437/test:latest ."

                    // Get the latest version (optional)
                    def currentVersion = sh(script: 'docker images --format "{{.Tag}}" ajay437/test | grep -E "^[0-9]+\\.[0-9]+$" | sort -r | head -n 1', returnStdout: true).trim()

                    def newVersion = ""
                    if (currentVersion == "" || !currentVersion.contains('.')) {
                        newVersion = "0.1"
                    } else {
                        def versionParts = currentVersion.split('\\.')
                        if (versionParts.length < 2) {
                            println("Invalid version format: " + currentVersion)
                        } else {
                            def major = versionParts[0].toInteger()
                            def minor = versionParts[1].toInteger()
                            newVersion = "${major}.${minor + 1}"
                        }
                    }

                    // Tag the image with the new version
                    sh "docker tag ajay437/test:latest ajay437/test:${newVersion}"
                    echo "New version tagged: ajay437/test:${newVersion}"

                    // Push the image to Docker Hub
                    sh "docker push ajay437/test:latest"
                    sh "docker push ajay437/test:${newVersion}"
                }
            }
        }
        stage('Deploy with Helm') {
            steps {
                script {
                    // Use credentials for GitHub access
                    credentialsId 'my-github-credential'

                    git 'https://github.com/Helm-Project/helm-project.git'

                    // Fetch latest changes for potential updates
                    git fetch --tags --force --progress +refs/heads/*:refs/remotes/origin/*

                    // Connect to EKS cluster (replace with your cluster configuration)
                    sh 'aws eks --region ca-central-1 update-kubeconfig  --name ed-eks-01'  

                    // Install Helm if missing
                    sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/v3.9.3/scripts/get-helm.sh && bash get_helm.sh'

                    // Deploy with Helm 
                    sh "helm upgrade --install myrelease ./helm-project -n ingress-nginx --set image.repository=ajay437/test --set image.tag=${newVersion}"
                }
            }
        }
    }      
}
