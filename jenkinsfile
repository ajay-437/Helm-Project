pipeline{
    agent any
    environment{
    DOCKERHUB_CREDENTIALS=credentials('docker-cred')
    }   
    def newVersion = ""
    stages {
        stage('Login to Docker Hub') {
            steps {
                    
                    sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                  }
            }

    stage('Build the image') {
            steps {
                    
                    sh "docker build -t ajay437/test:latest ."

                  }
            }
    stage('Get the latest version') {
            steps {
                   def currentVersion = sh(script: 'docker images --format "{{.Tag}}" ajay437/test | grep -E "^[0-9]+\\.[0-9]+$" | sort -r | head -n 1', returnStdout: true).trim()

                    def newVersion = ""
                    if (currentVersion == "" || !currentVersion.contains('.')) {
                        newVersion = "0.1"
                    } else {
                        def versionParts = currentVersion.split('\\.')
                        if (versionParts.length < 2) {
                            println("Invalid version format: " + currentVersion)
                        } else {
                            def major = versionParts[0].toInteger()
                            def minor = versionParts[1].toInteger()
                            newVersion = "${major}.${minor + 1}"
                        }
                    }

                  }
            }                
    stage('Tag the image with the new version') {
            steps {
                    sh "docker tag ajay437/test:latest ajay437/test:${newVersion}"
                    echo "New version tagged: ajay437/test:${newVersion}"

                  }
            }                

    stage('Push the image to Docker Hub') {
            steps {
                     sh "docker push ajay437/test:latest"
                    sh "docker push ajay437/test:${newVersion}"

                  }
            }                        

                }
            }
    stage('Deploy with Helm') {
            steps {
                script {
                    // Use credentials for GitHub access
                    credentialsId 'my-github-credential'

                    git 'https://github.com/Helm-Project/helm-project.git'

                    // Fetch latest changes for potential updates
                    git fetch --tags --force --progress +refs/heads/*:refs/remotes/origin/*

                    // Connect to EKS cluster (replace with your cluster configuration)
                    sh 'aws eks --region ca-central-1 update-kubeconfig  --name ed-eks-01'  

                    // Install Helm if missing
                    sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/v3.9.3/scripts/get-helm.sh && bash get_helm.sh'

                    // Deploy with Helm 
                    sh "helm upgrade --install myrelease ./helm-project -n ingress-nginx --set image.repository=ajay437/test --set image.tag=${newVersion}"
                }
            }
        }
    }      
post{
    always{
    sh 'docker logout'
          }
    }
}
